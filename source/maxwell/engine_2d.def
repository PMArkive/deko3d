
// FERMI_TWOD_A
engine _2D 0x902D;

0x080 SetDstFormat;
0x081 SetDstMemoryLayout enum (
	0 BlockLinear;
	1 Pitch;
);
0x082 SetDstBlockSize bits (
	4..6  Height enum (
		0 OneGob;
		1 TwoGobs;
		2 FourGobs;
		3 EightGobs;
		4 SixteenGobs;
		5 ThirtyTwoGobs;
	);
	8..10 Depth enum (
		0 OneGob;
		1 TwoGobs;
		2 FourGobs;
		3 EightGobs;
		4 SixteenGobs;
		5 ThirtyTwoGobs;
	);
);
0x083 SetDstDepth;
0x084 SetDstLayer;
0x085 SetDstPitch;
0x086 SetDstWidth;
0x087 SetDstHeight;
0x088 SetDstOffset iova;

0x08c SetSrcFormat;
0x08d SetSrcMemoryLayout enum (
	0 BlockLinear;
	1 Pitch;
);
0x08e SetSrcBlockSize bits (
	4..6  Height enum (
		0 OneGob;
		1 TwoGobs;
		2 FourGobs;
		3 EightGobs;
		4 SixteenGobs;
		5 ThirtyTwoGobs;
	);
	8..10 Depth enum (
		0 OneGob;
		1 TwoGobs;
		2 FourGobs;
		3 EightGobs;
		4 SixteenGobs;
		5 ThirtyTwoGobs;
	);
);
0x08f SetSrcDepth;
// 0x090 is TwodInvalidateTextureDataCache, there's no "SetSrcLayer" method
0x091 SetSrcPitch;
0x092 SetSrcWidth;
0x093 SetSrcHeight;
0x094 SetSrcOffset iova;

0x0a4 SetClipEnable bool;

0x0a9 SetBeta1 bits ( // blend alpha factor; 1.31 fixed point (<0 clamped to 0; only 8 fract bits used)
	23..30 Value;
);
0x0aa SetBeta4 bits ( // blend premult factor
	0..7   Red;
	8..15  Green;
	16..23 Blue;
	24..31 Alpha;
);
0x0ab SetOperation enum (
	0 SrcCopyAnd;     // if (SRC.A) DST = SRC;
	1 RopAnd;         // R = ROP(DST, SRC, PATTERN); if (R.A) DST = R;
	2 Blend;          // DST = (1 - SRC.A * BETA1) * DST + SRC * SRC.A * BETA1;
	3 SrcCopy;        // DST = SRC;
	4 Rop;            // DST = ROP(DST, SRC, PATTERN);
	5 SrcCopyPremult; // DST = SRC * BETA4;
	6 BlendPremult;   // DST = (1 - SRC.A * BETA4.A) * DST + SRC * BETA4;
);

0x0b5 SetCompressionEnable bool;

0x221 SetPixelsFromMemoryCorralSize;

0x223 SetPixelsFromMemorySampleMode bits (
	0 Origin enum (
		0 Center;
		1 Corner;
	);
	4 Filter enum (
		0 Point;
		1 Bilinear;
	);
);

0x22c SetPixelsFromMemoryDstX0;
0x22d SetPixelsFromMemoryDstY0;
0x22e SetPixelsFromMemoryDstWidth;
0x22f SetPixelsFromMemoryDstHeight;
0x230 SetPixelsFromMemoryDuDxFrac;
0x231 SetPixelsFromMemoryDuDxInt;
0x232 SetPixelsFromMemoryDvDyFrac;
0x233 SetPixelsFromMemoryDvDyInt;
0x234 SetPixelsFromMemorySrcX0Frac;
0x235 SetPixelsFromMemorySrcX0Int;
0x236 SetPixelsFromMemorySrcY0Frac;
0x237 PixelsFromMemorySrcY0Int; // writing to this register triggers the operation
